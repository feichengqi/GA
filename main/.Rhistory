# p is the number of individuals in population
# t is the time of iterating
pop = GA_initialize(dim, p)
for(i in 1:t){
# Find fitness
fitness_score = fitness2(pop,  data = data, fitness = AIC, func = lm)
#UPDATE(pop)
parents = pop[select_index(fitness_score)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
#childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
#children = list.append(children, childs[[1]], childs[[2]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
children = lapply(children, ga_mutate)
pop = children
}
return(pop)
}
select_index = function(fitness_score){
p = length(fitness_score)
# Ascending rank with respect to fitness score
fitness_rank = frankv(fitness_score, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
return(parents)
}
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
pop = GA_compute(dim = 3, p = 20, t = 100)
rank = frankv(fitness2(pop, data, fitness = AIC, func = lm), order = -1, ties.method = 'first')
pop[rank == 1]
library(rlist)
library(data.table)
source('fitness/project.R')
source('crossover/crossover.R')
GA_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
GA_compute = function(dim, p, t = 100){
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
pop = GA_initialize(dim, p)
for(i in 1:t){
# Find fitness
fitness_score = fitness2(pop,  data = data, fitness = AIC, func = lm)
#UPDATE(pop)
parents = pop[select_index(fitness_score)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
#childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
#children = list.append(children, childs[[1]], childs[[2]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
children = lapply(children, ga_mutate)
pop = children
}
return(pop)
}
select_index = function(fitness_score){
p = length(fitness_score)
# Ascending rank with respect to fitness score
fitness_rank = frankv(fitness_score, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
return(parents)
}
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
pop = GA_compute(dim = 3, p = 20, t = 100)
rank = frankv(fitness2(pop, data, fitness = AIC, func = lm), order = -1, ties.method = 'first')
pop[rank == 1]
library(rlist)
library(data.table)
source('fitness/project.R')
source('crossover/crossover.R')
GA_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
GA_compute = function(dim, p, t = 100){
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
pop = GA_initialize(dim, p)
for(i in 1:t){
# Find fitness
fitness_score = fitness2(pop,  data = data, fitness = AIC, func = lm)
#UPDATE(pop)
parents = pop[select_index(fitness_score)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
#childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
#children = list.append(children, childs[[1]], childs[[2]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
children = lapply(children, ga_mutate)
pop = children
}
return(pop)
}
select_index = function(fitness_score){
p = length(fitness_score)
# Ascending rank with respect to fitness score
fitness_rank = frankv(fitness_score, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
return(parents)
}
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
pop = GA_compute(dim = 3, p = 20, t = 100)
rank = frankv(fitness2(pop, data, fitness = AIC, func = lm), order = -1, ties.method = 'first')
pop[rank == 1]
library(rlist)
library(data.table)
source('fitness/project.R')
source('crossover/crossover.R')
GA_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
GA_compute = function(dim, p, t = 100){
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
pop = GA_initialize(dim, p)
for(i in 1:t){
# Find fitness
fitness_score = fitness2(pop,  data = data, fitness = AIC, func = lm)
#UPDATE(pop)
parents = pop[select_index(fitness_score)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
#childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
#children = list.append(children, childs[[1]], childs[[2]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
children = lapply(children, ga_mutate)
pop = children
}
return(pop)
}
select_index = function(fitness_score){
p = length(fitness_score)
# Ascending rank with respect to fitness score
fitness_rank = frankv(fitness_score, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
return(parents)
}
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
pop = GA_compute(dim = 3, p = 20, t = 100)
rank = frankv(fitness2(pop, data, fitness = AIC, func = lm), order = -1, ties.method = 'first')
pop[rank == 1]
library(rlist)
library(data.table)
source('fitness/project.R')
source('crossover/crossover.R')
GA_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
GA_compute = function(dim, p, t = 100){
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
pop = GA_initialize(dim, p)
for(i in 1:t){
# Find fitness
fitness_score = fitness2(pop,  data = data, fitness = AIC, func = lm)
#UPDATE(pop)
parents = pop[select_index(fitness_score)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
#childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
#children = list.append(children, childs[[1]], childs[[2]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
children = lapply(children, ga_mutate)
pop = children
}
return(pop)
}
select_index = function(fitness_score){
p = length(fitness_score)
# Ascending rank with respect to fitness score
fitness_rank = frankv(fitness_score, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
return(parents)
}
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
pop = GA_compute(dim = 3, p = 20, t = 100)
rank = frankv(fitness2(pop, data, fitness = AIC, func = lm), order = -1, ties.method = 'first')
pop[rank == 1]
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
list_gene <- list(c(TRUE,FALSE,FALSE), c(TRUE,FALSE,TRUE), c(TRUE,FALSE,TRUE))
# The new fitness function.
#list_of_gene is a list of gene likes
#list(c(TRUE,FALSE,FALSE), c(TRUE,FALSE,TRUE), c(TRUE,FALSE,TRUE)).
#data is a dataframe containing several x columus.
#fitness is the fitness function, default in AIC.
#func is the regression method, likes lm or glm, default in lm.
#response is the response value (y).
#min: TRUE is for those fitness function the smaller the fitness value the better the model
#like AIC,while FALSE is for those the larger fitness value the better the model.
fitness2 <- function(list_of_gene, data, fitness = AIC, func = lm, response, min = TRUE) {
fitness_value <- vector()
for (i in 1:length(list_of_gene)){
gene <- list_of_gene[[i]]
regression_data <- data[,gene]
regression_data <- data.frame(y,regression_data)
model <- func(y~., data = regression_data)
fitness_value <- c(fitness_value,fitness(model))
}
if (min == TRUE){return (-fitness_value)} else{return (fitness_value)}
}
# test
fitness2(list_gene, data = data, response = y)
fitness2(list_gene, data = data, func = glm, response = y)
mod1 <- lm(data$y~data$x1)
mod2 <- lm(data$y~data$x1+data$x2)
mod3 <- lm(data$y~data$x3+data$x1)
glmmod1 <- glm(data$y~data$x1)
AIC(mod1)
AIC(mod2)
AIC(mod3)
AIC(glmmod1)
mod <- list(mod1,mod2,mod3) # a list of mod
#the smaller the AIC value the better the model
#the function's argument is a lisr of lm or glm mod and a objective function(defalut:AIC)
fitness <- function(mod ,func = AIC){
fitvec <- vector()
for (i in 1:length(mod)) {
fitvec <- c(fitvec, func(mod[[i]]))
}
vec <- order(fitvec)
rank_mod <- list()
for (i in order(fitvec)) {
rank_mod <-c(rank_mod,mod[i])
}
return (rank_mod)
}
#the function return a list of mod ranked by their AIC value.
rank_mod <- fitness(mod)
AIC(rank_mod[[1]])
AIC(rank_mod[[2]])
AIC(rank_mod[[3]])
rlogical = function(size, p = 0.5){
# This function samples from Trues and Falses with
# probability 1/2 each by default
return(sample(c(TRUE, FALSE), size,
replace = TRUE, prob = c(p, 1-p)))
}
ga_crossover = function(parentA, parentB){
# This function take in two parents and uses a simple split
# to create children. It then picks a random child to pass on
# in the algorithm
n = length(parentA)
splitpt = sample(1:(n-1),1)
# Create two children
childA = parentA
childA[(splitpt+1):n] = parentB[(splitpt+1):n]
childB = parentB
childB[(splitpt+1):n] = parentA[(splitpt+1):n]
# Return both children
return(list(childA, childB))
}
ga_mutate = function(child, mprob = 0.03){
# This function takes in a child and randomly mutates each
# gene with probability mprob.
# Create vector of positions to mutate
changes = rlogical(length(child), mprob)
# For the subset of child that needs to be mutated, flip values
child[changes] = !child[changes]
return(child)
}
n = 20
parents = matrix(rlogical(n^2), n, n)
child_a = ga_crossover(parents[,1], parents[,2])
child_b = ga_mutate(child_a)
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
list_gene <- list(c(TRUE,FALSE,FALSE), c(TRUE,FALSE,TRUE), c(TRUE,FALSE,TRUE))
# The new fitness function.
#list_of_gene is a list of gene likes
#list(c(TRUE,FALSE,FALSE), c(TRUE,FALSE,TRUE), c(TRUE,FALSE,TRUE)).
#data is a dataframe containing several x columus.
#fitness is the fitness function, default in AIC.
#func is the regression method, likes lm or glm, default in lm.
#response is the response value (y).
#min: TRUE is for those fitness function the smaller the fitness value the better the model
#like AIC,while FALSE is for those the larger fitness value the better the model.
fitness2 <- function(list_of_gene, data, fitness = AIC, func = lm, response, min = TRUE) {
fitness_value <- vector()
for (i in 1:length(list_of_gene)){
gene <- list_of_gene[[i]]
regression_data <- data[,gene]
regression_data <- data.frame(y,regression_data)
model <- func(y~., data = regression_data)
fitness_value <- c(fitness_value,fitness(model))
}
if (min == TRUE){return (-fitness_value)} else{return (fitness_value)}
}
# test
fitness2(list_gene, data = data, response = y)
fitness2(list_gene, data = data, func = glm, response = y)
mod1 <- lm(data$y~data$x1)
mod2 <- lm(data$y~data$x1+data$x2)
mod3 <- lm(data$y~data$x3+data$x1)
glmmod1 <- glm(data$y~data$x1)
AIC(mod1)
AIC(mod2)
AIC(mod3)
AIC(glmmod1)
mod <- list(mod1,mod2,mod3) # a list of mod
#the smaller the AIC value the better the model
#the function's argument is a lisr of lm or glm mod and a objective function(defalut:AIC)
fitness <- function(mod ,func = AIC){
fitvec <- vector()
for (i in 1:length(mod)) {
fitvec <- c(fitvec, func(mod[[i]]))
}
vec <- order(fitvec)
rank_mod <- list()
for (i in order(fitvec)) {
rank_mod <-c(rank_mod,mod[i])
}
return (rank_mod)
}
#the function return a list of mod ranked by their AIC value.
rank_mod <- fitness(mod)
AIC(rank_mod[[1]])
AIC(rank_mod[[2]])
AIC(rank_mod[[3]])
library(rlist)
library(data.table)
source('fitness/project.R')
source('crossover/crossover.R')
GA_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
GA_compute = function(dim, p, t = 100){
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
pop = GA_initialize(dim, p)
for(i in 1:t){
# Find fitness
fitness_score = fitness2(pop,  data = data, fitness = AIC, func = lm)
#UPDATE(pop)
parents = pop[select_index(fitness_score)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
#childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
#children = list.append(children, childs[[1]], childs[[2]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
children = lapply(children, ga_mutate)
pop = children
}
return(pop)
}
select_index = function(fitness_score){
p = length(fitness_score)
# Ascending rank with respect to fitness score
fitness_rank = frankv(fitness_score, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
return(parents)
}
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
pop = GA_compute(dim = 3, p = 20, t = 100)
rank = frankv(fitness2(pop, data, fitness = AIC, func = lm), order = -1, ties.method = 'first')
pop[rank == 1]
View(pop)
library(rlist)
library(data.table)
source('fitness/project.R')
source('crossover/crossover.R')
GA_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
GA_compute = function(dim, p, t = 100){
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
pop = GA_initialize(dim, p)
for(i in 1:t){
# Find fitness
fitness_score = fitness2(pop,  data = data, fitness = AIC, func = lm)
#UPDATE(pop)
parents = pop[select_index(fitness_score)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
#children = list.append(children, childs[[1]], childs[[2]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
children = lapply(children, ga_mutate)
pop = children
}
return(pop)
}
select_index = function(fitness_score){
p = length(fitness_score)
# Ascending rank with respect to fitness score
fitness_rank = frankv(fitness_score, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
return(parents)
}
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
pop = GA_compute(dim = 3, p = 20, t = 100)
rank = frankv(fitness2(pop, data, fitness = AIC, func = lm), order = -1, ties.method = 'first')
pop[rank == 1]
library(rlist)
library(data.table)
source('fitness/project.R')
source('crossover/crossover.R')
GA_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
GA_compute = function(dim, p, t = 100){
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
pop = GA_initialize(dim, p)
for(i in 1:t){
# Find fitness
fitness_score = fitness2(pop,  data = data, fitness = AIC, func = lm)
#UPDATE(pop)
parents = pop[select_index(fitness_score)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
children = lapply(children, ga_mutate)
pop = children
}
return(pop)
}
select_index = function(fitness_score){
p = length(fitness_score)
# Ascending rank with respect to fitness score
fitness_rank = frankv(fitness_score, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
return(parents)
}
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
pop = GA_compute(dim = 3, p = 20, t = 100)
rank = frankv(fitness2(pop, data, fitness = AIC, func = lm), order = -1, ties.method = 'first')
pop[rank == 1]
