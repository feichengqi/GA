install.packages("rlist")
library(rlist)
library(data.table)
source('fitness/project.R')
library(rlist)
library(data.table)
source('fitness/project.R')
source('crossover/crossover.R')
setwd('..')
source('fitness/project.R')
source('crossover/crossover.R')
# This function takes dimension and the number of individuals
# and returns a list/matrix of initialized individuals
GA_initialize = function(dim, p = 20){
individuals = list()
for(i in 1:p){
individual = runif(n = dim) > 0.5
individuals = list.append(individuals, individual)
}
return(individuals)
}
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
GA_compute = function(dim, p, t = 100){
pop = GA_initialize(dim, p)
for(i in 1:t){
# Find fitness
fitness_score = fitness2(pop, data, fitness = AIC, func = lm)
#UPDATE(pop)
children = list()
parents = pop[select_index(fitness_score)]
p = length(parents)
for(i in 1:(p/2)){
childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
children = list.append(children, childs[[1]], childs[[2]])
}
children = lapply(children, ga_mutate)
}
pop = children
return(pop)
}
select_index = function(fitness_score){
p = length(fitness_score)
# Ascending rank with respect to fitness score
fitness_rank = frankv(fitness_score, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
return(parents)
}
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
pop = GA_compute(dim = 3, p = 20, t = 100)
rank = frankv(fitness2(pop, data, fitness = AIC, func = lm), order = -1, ties.method = 'first')
pop[rank == 1]
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
length(data)
list_gene <- list(c(1,0,0), c(0,0,1), c(1,0,1))
# The new fitness function.
fitness2 <- function(list_of_gene, data, fitness = AIC, func = lm, response) {
fitness_value <- vector()
for (i in 1:length(list_of_gene)){
gene <- list_of_gene[[i]]
gene_map <- rep(TRUE,length(gene))
for (j in 1:length(gene)){
if (gene[j] == 0){gene_map[j] <- FALSE}
}
regression_data <- data[,gene_map]
regression_data <- data.frame(y,regression_data)
model <- func(y~., data = regression_data)
fitness_value <- c(fitness_value,fitness(model))
}
return (-fitness_value)
}
fitness2(list_gene, data = data, response = y)
fitness2(list_gene, data = data, func = glm, response = y)
# The new fitness function.
fitness2 <- function(list_of_gene, data, fitness = AIC, func = lm, response) {
fitness_value <- vector()
for (i in 1:length(list_of_gene)){
gene <- list_of_gene[[i]]
gene_map <- rep(TRUE,length(gene))
for (j in 1:length(gene)){
if (gene[j] == 0){gene_map[j] <- FALSE}
}
regression_data <- data[,gene_map]
regression_data <- data.frame(y,regression_data)
model <- func(y~., data = regression_data)
fitness_value <- c(fitness_value,fitness(model))
}
return (fitness_value)
}
fitness2(list_gene, data = data, response = y)
fitness2(list_gene, data = data, func = glm, response = y)
# The new fitness function.
fitness2 <- function(list_of_gene, data, fitness = AIC, func = lm, response) {
fitness_value <- vector()
for (i in 1:length(list_of_gene)){
gene <- list_of_gene[[i]]
gene_map <- rep(TRUE,length(gene))
for (j in 1:length(gene)){
if (gene[j] == 0){gene_map[j] <- FALSE}
}
regression_data <- data[,gene_map]
regression_data <- data.frame(y,regression_data)
model <- func(y~., data = regression_data)
fitness_value <- c(fitness_value,fitness(model))
}
return (-fitness_value)
}
fitness2(list_gene, data = data, response = y)
fitness2(list_gene, data = data, func = glm, response = y)
# The new fitness function.
#list_of_gene is a list of gene likes list(c(1,0,0), c(0,0,1), c(1,0,1)).
#data is a dataframe containing several x columus.
#fitness is the fitness function, default in AIC.
#func is the regression method, likes lm or glm, default in lm.
#response is the response value (y).
#min: TRUE is for those fitness function the smaller the fitness value the better the model
#like AIC,while FALSE is for those the larger fitness value the better the model.
fitness2 <- function(list_of_gene, data, fitness = AIC, func = lm, response, min = TRUE) {
fitness_value <- vector()
for (i in 1:length(list_of_gene)){
gene <- list_of_gene[[i]]
gene_map <- rep(TRUE,length(gene))
for (j in 1:length(gene)){
if (gene[j] == 0){gene_map[j] <- FALSE}
}
regression_data <- data[,gene_map]
regression_data <- data.frame(y,regression_data)
model <- func(y~., data = regression_data)
fitness_value <- c(fitness_value,fitness(model))
}
if (min == TRUE){return (-fitness_value)} else{return (fitness_value)}
}
# test
fitness2(list_gene, data = data, response = y)
fitness2(list_gene, data = data, func = glm, response = y)
