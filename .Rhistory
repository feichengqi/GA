devtools::document()
library(assertthat)
library(rlist)
library(data.table)
ga_rlogical = function(size, p = 0.5){
# This function samples from Trues and Falses with
# probability 1/2 each by default
return(sample(c(TRUE, FALSE), size,
replace = TRUE, prob = c(p, 1-p)))
}
ga_crossover = function(parentA, parentB){
# This function take in two parents and uses a simple split
# to create children. It then picks a random child to pass on
# in the algorithm
n = length(parentA)
splitpt = sample(1:(n-1),1)
# Create two children
childA = parentA
childA[(splitpt+1):n] = parentB[(splitpt+1):n]
childB = parentB
childB[(splitpt+1):n] = parentA[(splitpt+1):n]
# Return both children
return(list(childA, childB))
}
ga_mutate = function(child, mprob = 0.03){
# This function takes in a child and randomly mutates each
# gene with probability mprob.
# Create vector of positions to mutate
changes = ga_rlogical(length(child), mprob)
# For the subset of child that needs to be mutated, flip values
child[changes] = !child[changes]
return(child)
}
# The new fitness function.
#list_of_gene is a list of gene likes
#list(c(TRUE,FALSE,FALSE), c(TRUE,FALSE,TRUE), c(TRUE,FALSE,TRUE)).
#data is a dataframe containing several x columus.
#fitness is the fitness function, default in AIC.
#func is the regression method, likes lm or glm, default in lm.
#response is the response value (y).
#min: TRUE is for those fitness function the smaller the fitness value the better the model
#like AIC,while FALSE is for those the larger fitness value the better the model.
ga_fitness_score <- function(list_of_gene, data, fitness = AIC, func = lm, response, min = FALSE) {
assert_that(is.data.frame(data), msg = "the data must be a dataframe.")
assert_that(length(response) == nrow(data),
msg = "the dimension of observed vectors should be the same as that of response vector.")
fitness_value <- vector()
for (i in 1:length(list_of_gene)){
gene <- list_of_gene[[i]]
regression_data <- data[,gene]
regression_data <- data.frame(y,regression_data)
model <- func(y~., data = regression_data)
fitness_value <- c(fitness_value,fitness(model))
}
if (min == TRUE){
return (-fitness_value)
}
else{
return (fitness_value)
}
}
## GA_initialize() function initializes the
ga_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
ga_compute = function(dim, p, t = 100, selection_method = 'rank', partial_update = FALSE, parent_ratio = 0.5, m_prob = 0.03, ...){
assert_that(parent_ratio >= 0 & parent_ratio <= 1, msg = 'Ratio of parents should be between 0 and 1')
assert_that(nrow(data)>=dim, msg = 'The dimenstion exceeds the length of observed data vector.')
pop = ga_initialize(dim, p)
highest_fitness = numeric()
best_individual = list(0,0)
for(i in 1:t){
# Find fitness
ga_fitness_scores = ga_fitness_score(pop, ...)
max_fit_score = max(ga_fitness_scores)
# Find the best individual
highest_fitness = c(highest_fitness, max_fit_score)
if(max_fit_score > best_individual[[2]]){
best_individual[[1]] = pop[ga_fitness_scores == max_fit_score]
best_individual[[2]] = max_fit_score
}
#UPDATE(pop)
parents = pop[ga_select_index(ga_fitness_scores, method = selection_method)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
if(partial_update){
ind = sample(1:p, floor(parent_ratio*p), replace = FALSE)
children[ind] = pop[ind]
}
children = lapply(children, ga_mutate, mprob = m_prob)
pop = children
}
# Latest Update of best_individual
ga_fitness_scores = ga_fitness_score(pop, ...)
if(max_fit_score > best_individual[[2]]){
best_individual[[1]] = pop[ga_fitness_scores == max_fit_score]
best_individual[[2]] = max_fit_score
}
return(list(pop,highest_fitness, best_individual))
}
ga_select_index = function(ga_fitness_scores, method = 'rank'){
assert_that(method %in% c('score', 'rank'), msg = "method should be {score, rank}")
p = length(ga_fitness_scores)
if(method == 'rank'){
fitness_rank = frankv(ga_fitness_scores, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
}
if(method == 'score'){
parents = (1:p)[ga_fitness_scores >= median(ga_fitness_scores)]
parents = c(parents, sample(1:p, size = p - length(parents), replace = TRUE))
}
return(parents)
}
library(testthat)
library(devtools)
install.packages("prodlim")
library(assertthat)
library(testthat)
library(prodlim)
# Test main function select and ga_fitness_score
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
test_that("ga_fitness_score works", {
expect_identical(fitness,fitness_scores)
})
setwd('..')
setwd('..')
library(rlist)
library(data.table)
source('fitness/project.R')
source('crossover/crossover.R')
## GA_initialize() function initializes the
ga_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
ga_compute = function(dim, p, t = 100, selection_method = 'rank', partial_update = FALSE, parent_ratio = 0.5, m_prob = 0.03, ...){
assert_that(parent_ratio >= 0 & parent_ratio <= 1, msg = 'Ratio of parents should be between 0 and 1')
assert_that(nrow(data)>=dim, msg = 'The dimenstion exceeds the length of observed data vector.')
pop = ga_initialize(dim, p)
highest_fitness = numeric()
best_individual = list(0,0)
for(i in 1:t){
# Find fitness
ga_fitness_scores = ga_fitness_score(pop, ...)
max_fit_score = max(ga_fitness_scores)
# Find the best individual
highest_fitness = c(highest_fitness, max_fit_score)
if(max_fit_score > best_individual[[2]]){
best_individual[[1]] = pop[ga_fitness_scores == max_fit_score]
best_individual[[2]] = max_fit_score
}
#UPDATE(pop)
parents = pop[ga_select_index(ga_fitness_scores, method = selection_method)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
if(partial_update){
ind = sample(1:p, floor(parent_ratio*p), replace = FALSE)
children[ind] = pop[ind]
}
children = lapply(children, ga_mutate, mprob = m_prob)
pop = children
}
# Latest Update of best_individual
ga_fitness_scores = ga_fitness_score(pop, ...)
if(max_fit_score > best_individual[[2]]){
best_individual[[1]] = pop[ga_fitness_scores == max_fit_score]
best_individual[[2]] = max_fit_score
}
return(list(pop,highest_fitness, best_individual))
}
ga_select_index = function(ga_fitness_scores, method = 'rank'){
assert_that(method %in% c('score', 'rank'), msg = "method should be {score, rank}")
p = length(ga_fitness_scores)
if(method == 'rank'){
fitness_rank = frankv(ga_fitness_scores, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
}
if(method == 'score'){
parents = (1:p)[ga_fitness_scores >= median(ga_fitness_scores)]
parents = c(parents, sample(1:p, size = p - length(parents), replace = TRUE))
}
return(parents)
}
#y = c(1,3,5,7,9)
#data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5),
#                   x4 =c (5,4,6,2,4),x5 = c(100,200,300,400,500))
data = read.table('madelon_train.data')
y = unlist(read.table('madelon_train.labels'))
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
ft_score = ga_fitness_score(pop[[1]], data, fitness = AIC, func = glm, response = y, min = TRUE)
result = pop[[1]][ft_score == max(ft_score)]
plot(x = 1:100, y = pop[[2]], xlab = 'iteration', ylab = 'highest fitness')
#y = c(1,3,5,7,9)
#data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5),
#                   x4 =c (5,4,6,2,4),x5 = c(100,200,300,400,500))
data = read.table('madelon_train.data')
y = unlist(read.table('madelon_train.labels'))
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
source('fitness/project.R')
source('crossover/crossover.R')
## GA_initialize() function initializes the
ga_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
ga_compute = function(dim, p, t = 100, selection_method = 'rank', partial_update = FALSE, parent_ratio = 0.5, m_prob = 0.03, ...){
assert_that(parent_ratio >= 0 & parent_ratio <= 1, msg = 'Ratio of parents should be between 0 and 1')
assert_that(nrow(data)>=dim, msg = 'The dimenstion exceeds the length of observed data vector.')
pop = ga_initialize(dim, p)
highest_fitness = numeric()
best_individual = list(0,0)
for(i in 1:t){
# Find fitness
ga_fitness_scores = ga_fitness_score(pop, ...)
max_fit_score = max(ga_fitness_scores)
# Find the best individual
highest_fitness = c(highest_fitness, max_fit_score)
if(max_fit_score > best_individual[[2]]){
best_individual[[1]] = pop[ga_fitness_scores == max_fit_score]
best_individual[[2]] = max_fit_score
}
#UPDATE(pop)
parents = pop[ga_select_index(ga_fitness_scores, method = selection_method)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
if(partial_update){
ind = sample(1:p, floor(parent_ratio*p), replace = FALSE)
children[ind] = pop[ind]
}
children = lapply(children, ga_mutate, mprob = m_prob)
pop = children
}
# Latest Update of best_individual
ga_fitness_scores = ga_fitness_score(pop, ...)
if(max_fit_score > best_individual[[2]]){
best_individual[[1]] = pop[ga_fitness_scores == max_fit_score]
best_individual[[2]] = max_fit_score
}
return(list(pop,highest_fitness, best_individual))
}
ga_select_index = function(ga_fitness_scores, method = 'rank'){
assert_that(method %in% c('score', 'rank'), msg = "method should be {score, rank}")
p = length(ga_fitness_scores)
if(method == 'rank'){
fitness_rank = frankv(ga_fitness_scores, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
}
if(method == 'score'){
parents = (1:p)[ga_fitness_scores >= median(ga_fitness_scores)]
parents = c(parents, sample(1:p, size = p - length(parents), replace = TRUE))
}
return(parents)
}
#y = c(1,3,5,7,9)
#data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5),
#                   x4 =c (5,4,6,2,4),x5 = c(100,200,300,400,500))
data = read.table('madelon_train.data')
y = unlist(read.table('madelon_train.labels'))
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
View(pop)
library(assertthat)
library(testthat)
library(prodlim)
# Test main function select and ga_fitness_score
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
test_that("ga_fitness_score works", {
expect_identical(fitness,fitness_scores)
})
pop_result = select(dim = 3, p = 25, t = 50, m_prob = 0.01, data = data, fitness = AIC, func = lm, response = y, min = TRUE)
names(pop_result[[3]][[1]]) = NULL
pop_result = select(dim = 3, p = 25, t = 50, m_prob = 0.01, data = data, fitness = AIC, func = lm, response = y, min = TRUE)
names(pop_result[[3]][[1]]) = NULL
pop_result = ga_select(dim = 3, p = 25, t = 50, m_prob = 0.01, data = data, fitness = AIC, func = lm, response = y, min = TRUE)
pop_result = select(dim = 3, p = 25, t = 50, m_prob = 0.01, data = data, fitness = AIC, func = lm, response = y, min = TRUE)
select = function(dim, p, t = 100, selection_method = 'rank', partial_update = FALSE, parent_ratio = 0.5, m_prob = 0.03, ...){
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
assert_that(parent_ratio >= 0 & parent_ratio <= 1, msg = 'Ratio of parents should be between 0 and 1')
assert_that(nrow(data)>=dim, msg = 'The dimenstion exceeds the length of observed data vector.')
pop = ga_initialize(dim, p)
highest_fitness = numeric()
best_individual = 0
best_score = -1e8
for(i in 1:t){
# Find fitness
ga_fitness_scores = ga_fitness_score(pop, ...)
max_fit_score = max(ga_fitness_scores)
# Find the best individual
highest_fitness = c(highest_fitness, max_fit_score)
if(max_fit_score > best_score){
best_individual = pop[ga_fitness_scores == max_fit_score][1]
best_score = max_fit_score
}
#UPDATE(pop)
parents = pop[ga_select_index(ga_fitness_scores, method = selection_method)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
if(partial_update){
ind = sample(1:p, floor(parent_ratio*p), replace = FALSE)
children[ind] = pop[ind]
}
children = lapply(children, ga_mutate, mprob = m_prob)
pop = children
}
# Latest Update of best_individual
ga_fitness_scores = ga_fitness_score(pop, ...)
if(max_fit_score > best_score){
best_individual = pop[ga_fitness_scores == max_fit_score][1]
best_score = max_fit_score
}
return(list(pop,highest_fitness, list(best_individual, best_score)))
}
pop_result = select(dim = 3, p = 25, t = 50, m_prob = 0.01, data = data, fitness = AIC, func = lm, response = y, min = TRUE)
names(pop_result[[3]][[1]]) = NULL
test_that("select works",{
expect_identical(unlist(pop_result[[3]][[1]]), c(TRUE, FALSE, FALSE))
})
# Test main function select and ga_fitness_score
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
test_that("ga_fitness_score works", {
expect_identical(fitness,fitness_scores)
})
pop_result = select(dim = 3, p = 25, t = 50, m_prob = 0.01, data = data, fitness = AIC, func = lm, response = y, min = TRUE)
names(pop_result[[3]][[1]]) = NULL
test_that("select works",{
expect_identical(unlist(pop_result[[3]][[1]]), c(TRUE, FALSE, FALSE))
})
# Test fitness_score again
y = c(1,3,5,7,9)
data2 = cbind(c(10,9,5,7,6),  c(7,6,5,4,3), c(1,2,3,4,5))
data3 = data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data2[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
fitness_score = ga_fitness_score(list_of_gene = gene, response = y, data = data3)
test_that('ga_fitness_score works', {
expect_equal(fitness, fitness_score)
})
# Tests for ga_mutate and ga_crossover
test_that("ga_mutate works",{
all_combos = unique(expand.grid(c(TRUE,FALSE,FALSE),
c(TRUE,FALSE,FALSE),
c(TRUE,FALSE,FALSE)))
result = ga_mutate(c(TRUE,FALSE,FALSE))
check = sum(row.match(all_combos, matrix(result, nrow = 1)), na.rm = T)
expect_equal(check,1L)
})
test_that("ga_crossover works",{
parentA = c(TRUE, FALSE, FALSE)
parentB = c(FALSE, TRUE, TRUE)
child1 = as.data.frame(matrix(
c(TRUE,TRUE,TRUE,
TRUE,FALSE,TRUE,
TRUE,FALSE,FALSE), byrow = T, nrow = 3))
child2 = as.data.frame(matrix(
c(FALSE,FALSE,FALSE,
FALSE,TRUE,FALSE,
FALSE,TRUE,TRUE), byrow = T, nrow = 3))
result = ga_crossover(parentA, parentB)
check1 = row.match(child1, matrix(result[[1]], nrow = 1))
check2 = row.match(child2, matrix(result[[2]], nrow = 1))
expect_identical(check1,check2)
})
devtools::test('GA')
devtools::test()
devtools::use_testthat()
source('~/Desktop/GA/tests/testthat/test.R', echo=TRUE)
library(GA)
library(GA)
library(GA)
library(GA)
library(GA)
library(GA)
library(GA)
?select
install_github(paste0('feichengqi/','GA'))
library(devtools)
install_github(paste0('feichengqi/','GA'))
devtools::test('GA')
devtools::test(GA)
library(GA)
devtools::test(GA)
testthat::test_package(’GA’)
testthat::test_package('GA)
testthat::test_package('GA')
install_github(paste0('feichengqi/','GA'))
testthat::test_package('GA')
install.packages('roxygen2')
testthat::test_package('GA')
devtools::test(’GA’)
devtools::test('GA')
