devtools::document()
?ga_compute
library(GA)
?ga_compute
detach("package:GA", unload = TRUE)
library(rlist)
library(data.table)
source('fitness/project.R')
source('crossover/crossover.R')
## GA_initialize() function initializes the
GA_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
library(rlist)
library(data.table)
source('fitness/project.R')
setwd(..)
setwd('..')
setwd('..')
setwd('..')
setwd('GA')
source('fitness/project.R')
source('crossover/crossover.R')
## GA_initialize() function initializes the
ga_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
ga_compute = function(dim, p, t = 100, selection_method = 'rank', partial_update = FALSE, parent_ratio = 0.5, m_prob = 0.03, ...){
assert_that(parent_ratio >= 0 & parent_ratio <= 1, msg = 'Ratio of parents should be between 0 and 1')
assert_that(nrow(data)>=dim, msg = 'The dimenstion exceeds the length of observed data vector.')
pop = GA_initialize(dim, p)
highest_fitness = numeric()
best_individual = list(0,0)
for(i in 1:t){
# Find fitness
ga_fitness_scores = ga_fitness_score(pop, ...)
max_fit_score = max(ga_fitness_scores)
# Find the best individual
highest_fitness = c(highest_fitness, max_fit_score)
if(max_fit_score > best_individual[[2]]){
best_individual[[1]] = pop[ga_fitness_scores == max_fit_score]
best_individual[[2]] = max_fit_score
}
#UPDATE(pop)
parents = pop[ga_select_index(ga_fitness_scores, method = selection_method)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
if(partial_update){
ind = sample(1:p, floor(parent_ratio*p), replace = FALSE)
children[ind] = pop[ind]
}
children = lapply(children, ga_mutate, mprob = m_prob)
pop = children
}
# Latest Update of best_individual
ga_fitness_scores = ga_fitness_score(pop, ...)
if(max_fit_score > best_individual[[2]]){
best_individual[[1]] = pop[fitness_scores == max_fit_score]
best_individual[[2]] = max_fit_score
}
return(list(pop,highest_fitness, best_individual))
}
ga_select_index = function(ga_fitness_scores, method = 'rank'){
assert_that(method %in% c('score', 'rank'), msg = "method should be {score, rank}")
p = length(fitness_scores)
if(method == 'rank'){
fitness_rank = frankv(ga_fitness_scores, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
}
if(method == 'score'){
parents = (1:p)[fitness_scores >= median(fitness_scores)]
parents = c(parents, sample(1:p, size = p - length(parents), replace = TRUE))
}
return(parents)
}
#y = c(1,3,5,7,9)
#data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5),
#                   x4 =c (5,4,6,2,4),x5 = c(100,200,300,400,500))
data = read.table('madelon_train.data')
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5),
pop = GA_compute(dim = 500, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
ft_score = fitness_score(pop[[1]], data, fitness = AIC, func = glm, response = y, min = TRUE)
pop = GA_compute(dim = 500, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
pop = ga_compute(dim = 500, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
ga_rlogical = function(size, p = 0.5){
# This function samples from Trues and Falses with
# probability 1/2 each by default
return(sample(c(TRUE, FALSE), size,
replace = TRUE, prob = c(p, 1-p)))
}
ga_crossover = function(parentA, parentB){
# This function take in two parents and uses a simple split
# to create children. It then picks a random child to pass on
# in the algorithm
n = length(parentA)
splitpt = sample(1:(n-1),1)
# Create two children
childA = parentA
childA[(splitpt+1):n] = parentB[(splitpt+1):n]
childB = parentB
childB[(splitpt+1):n] = parentA[(splitpt+1):n]
# Return both children
return(list(childA, childB))
}
ga_mutate = function(child, mprob = 0.03){
# This function takes in a child and randomly mutates each
# gene with probability mprob.
# Create vector of positions to mutate
changes = rlogical(length(child), mprob)
# For the subset of child that needs to be mutated, flip values
child[changes] = !child[changes]
return(child)
}
n = 20
parents = matrix(ga_rlogical(n^2), n, n)
child_a = ga_crossover(parents[,1], parents[,2])
child_b = ga_mutate(child_a)
library(rlist)
library(data.table)
source('fitness/project.R')
source('crossover/crossover.R')
## GA_initialize() function initializes the
ga_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
ga_compute = function(dim, p, t = 100, selection_method = 'rank', partial_update = FALSE, parent_ratio = 0.5, m_prob = 0.03, ...){
assert_that(parent_ratio >= 0 & parent_ratio <= 1, msg = 'Ratio of parents should be between 0 and 1')
assert_that(nrow(data)>=dim, msg = 'The dimenstion exceeds the length of observed data vector.')
pop = ga_initialize(dim, p)
highest_fitness = numeric()
best_individual = list(0,0)
for(i in 1:t){
# Find fitness
ga_fitness_scores = ga_fitness_score(pop, ...)
max_fit_score = max(ga_fitness_scores)
# Find the best individual
highest_fitness = c(highest_fitness, max_fit_score)
if(max_fit_score > best_individual[[2]]){
best_individual[[1]] = pop[ga_fitness_scores == max_fit_score]
best_individual[[2]] = max_fit_score
}
#UPDATE(pop)
parents = pop[ga_select_index(ga_fitness_scores, method = selection_method)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
if(partial_update){
ind = sample(1:p, floor(parent_ratio*p), replace = FALSE)
children[ind] = pop[ind]
}
children = lapply(children, ga_mutate, mprob = m_prob)
pop = children
}
# Latest Update of best_individual
ga_fitness_scores = ga_fitness_score(pop, ...)
if(max_fit_score > best_individual[[2]]){
best_individual[[1]] = pop[fitness_scores == max_fit_score]
best_individual[[2]] = max_fit_score
}
return(list(pop,highest_fitness, best_individual))
}
ga_select_index = function(ga_fitness_scores, method = 'rank'){
assert_that(method %in% c('score', 'rank'), msg = "method should be {score, rank}")
p = length(fitness_scores)
if(method == 'rank'){
fitness_rank = frankv(ga_fitness_scores, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
}
if(method == 'score'){
parents = (1:p)[fitness_scores >= median(fitness_scores)]
parents = c(parents, sample(1:p, size = p - length(parents), replace = TRUE))
}
return(parents)
}
#y = c(1,3,5,7,9)
#data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5),
#                   x4 =c (5,4,6,2,4),x5 = c(100,200,300,400,500))
data = read.table('madelon_train.data')
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5),
#                   x4 =c (5,4,6,2,4),x5 = c(100,200,300,400,500))
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5),
x4 =c (5,4,6,2,4),x5 = c(100,200,300,400,500))
#y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5),
x4 =c (5,4,6,2,4),x5 = c(100,200,300,400,500))
#y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5),
x4 =c (5,4,6,2,4),x5 = c(100,200,300,400,500))
pop = ga_compute(dim = 500, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
source('fitness/project.R')
source('crossover/crossover.R')
## GA_initialize() function initializes the
ga_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
ga_compute = function(dim, p, t = 100, selection_method = 'rank', partial_update = FALSE, parent_ratio = 0.5, m_prob = 0.03, ...){
assert_that(parent_ratio >= 0 & parent_ratio <= 1, msg = 'Ratio of parents should be between 0 and 1')
assert_that(nrow(data)>=dim, msg = 'The dimenstion exceeds the length of observed data vector.')
pop = ga_initialize(dim, p)
highest_fitness = numeric()
best_individual = list(0,0)
for(i in 1:t){
# Find fitness
ga_fitness_scores = ga_fitness_score(pop, ...)
max_fit_score = max(ga_fitness_scores)
# Find the best individual
highest_fitness = c(highest_fitness, max_fit_score)
if(max_fit_score > best_individual[[2]]){
best_individual[[1]] = pop[ga_fitness_scores == max_fit_score]
best_individual[[2]] = max_fit_score
}
#UPDATE(pop)
parents = pop[ga_select_index(ga_fitness_scores, method = selection_method)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
if(partial_update){
ind = sample(1:p, floor(parent_ratio*p), replace = FALSE)
children[ind] = pop[ind]
}
children = lapply(children, ga_mutate, mprob = m_prob)
pop = children
}
# Latest Update of best_individual
ga_fitness_scores = ga_fitness_score(pop, ...)
if(max_fit_score > best_individual[[2]]){
best_individual[[1]] = pop[ga_fitness_scores == max_fit_score]
best_individual[[2]] = max_fit_score
}
return(list(pop,highest_fitness, best_individual))
}
ga_select_index = function(ga_fitness_scores, method = 'rank'){
assert_that(method %in% c('score', 'rank'), msg = "method should be {score, rank}")
p = length(ga_fitness_scores)
if(method == 'rank'){
fitness_rank = frankv(ga_fitness_scores, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
}
if(method == 'score'){
parents = (1:p)[ga_fitness_scores >= median(ga_fitness_scores)]
parents = c(parents, sample(1:p, size = p - length(parents), replace = TRUE))
}
return(parents)
}
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
devtools::document()
devtools::document()
