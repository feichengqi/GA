test_that("ga_mutate works",{
all_combos = unique(expand.grid(c(TRUE,FALSE,FALSE),
c(TRUE,FALSE,FALSE),
c(TRUE,FALSE,FALSE)))
result = ga_mutate(c(TRUE,FALSE,FALSE))
check = sum(row.match(all_combos, matrix(result, nrow = 1)), na.rm = T)
expect_equal(check,1L)
})
test_that("ga_crossover works",{
parentA = c(TRUE, FALSE, FALSE)
parentB = c(FALSE, TRUE, TRUE)
child1 = as.data.frame(matrix(
c(TRUE,TRUE,TRUE,
TRUE,FALSE,TRUE,
TRUE,FALSE,FALSE), byrow = T, nrow = 3))
child2 = as.data.frame(matrix(
c(FALSE,FALSE,FALSE,
FALSE,TRUE,FALSE,
FALSE,TRUE,TRUE), byrow = T, nrow = 3))
result = ga_crossover(parentA, parentB)
check1 = row.match(child1, matrix(result[[1]], nrow = 1))
check2 = row.match(child2, matrix(result[[2]], nrow = 1))
expect_identical(check1,check2)
})
devtools::test('GA')
devtools::test('GA')
library(assertthat)
library(testthat)
library(prodlim)
# Test main function select and ga_fitness_score
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
fitness
fitness_scores
devtools::test('GA')
devtools::test('GA')
devtools::test('GA')
devtools::test('GA')
devtools::test('GA')
library(assertthat)
library(testthat)
library(prodlim)
# Test main function select and ga_fitness_score
context('test 1')
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
test_that("ga_fitness_score works", {
expect_identical(fitness,fitness_scores)
})
context('test 2')
pop_result = select(dim = 3, p = 25, t = 50, m_prob = 0.01, data = data, fitness = AIC, func = lm, response = y, min = TRUE)
names(pop_result[[3]][[1]]) = NULL
test_that("select works",{
expect_identical(unlist(pop_result[[3]][[1]]), c(TRUE, FALSE, FALSE))
})
context('test 3')
y = c(1,3,5,7,9)
data2 = cbind(c(10,9,5,7,6),  c(7,6,5,4,3), c(1,2,3,4,5))
data3 = data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data2[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
fitness_score = ga_fitness_score(list_of_gene = gene, response = y, data = data3)
test_that('ga_fitness_score works', {
expect_equal(fitness, fitness_score)
})
context('test 4')
test_that("ga_mutate works",{
all_combos = unique(expand.grid(c(TRUE,FALSE,FALSE),
c(TRUE,FALSE,FALSE),
c(TRUE,FALSE,FALSE)))
result = ga_mutate(c(TRUE,FALSE,FALSE))
check = sum(row.match(all_combos, matrix(result, nrow = 1)), na.rm = T)
expect_equal(check,1L)
})
context('test 5')
test_that("ga_crossover works",{
parentA = c(TRUE, FALSE, FALSE)
parentB = c(FALSE, TRUE, TRUE)
child1 = as.data.frame(matrix(
c(TRUE,TRUE,TRUE,
TRUE,FALSE,TRUE,
TRUE,FALSE,FALSE), byrow = T, nrow = 3))
child2 = as.data.frame(matrix(
c(FALSE,FALSE,FALSE,
FALSE,TRUE,FALSE,
FALSE,TRUE,TRUE), byrow = T, nrow = 3))
result = ga_crossover(parentA, parentB)
check1 = row.match(child1, matrix(result[[1]], nrow = 1))
check2 = row.match(child2, matrix(result[[2]], nrow = 1))
expect_identical(check1,check2)
})
# Test main function select and ga_fitness_score
context('test 1')
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
test_that("ga_fitness_score works", {
expect_identical(fitness,fitness_scores)
})
context('test 2')
pop_result = select(dim = 3, p = 25, t = 50, m_prob = 0.01, data = data, fitness = AIC, func = lm, response = y, min = TRUE)
names(pop_result[[3]][[1]]) = NULL
test_that("select works",{
expect_identical(unlist(pop_result[[3]][[1]]), c(TRUE, FALSE, FALSE))
})
context('test 3')
y = c(1,3,5,7,9)
data2 = cbind(c(10,9,5,7,6),  c(7,6,5,4,3), c(1,2,3,4,5))
data3 = data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data2[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
fitness_score = ga_fitness_score(list_of_gene = gene, response = y, data = data3)
test_that('ga_fitness_score works', {
expect_equal(fitness, fitness_score)
})
context('test 4')
test_that("ga_mutate works",{
all_combos = unique(expand.grid(c(TRUE,FALSE,FALSE),
c(TRUE,FALSE,FALSE),
c(TRUE,FALSE,FALSE)))
result = ga_mutate(c(TRUE,FALSE,FALSE))
check = sum(row.match(all_combos, matrix(result, nrow = 1)), na.rm = T)
expect_equal(check,1L)
})
context('test 5')
test_that("ga_crossover works",{
parentA = c(TRUE, FALSE, FALSE)
parentB = c(FALSE, TRUE, TRUE)
child1 = as.data.frame(matrix(
c(TRUE,TRUE,TRUE,
TRUE,FALSE,TRUE,
TRUE,FALSE,FALSE), byrow = T, nrow = 3))
child2 = as.data.frame(matrix(
c(FALSE,FALSE,FALSE,
FALSE,TRUE,FALSE,
FALSE,TRUE,TRUE), byrow = T, nrow = 3))
result = ga_crossover(parentA, parentB)
check1 = row.match(child1, matrix(result[[1]], nrow = 1))
check2 = row.match(child2, matrix(result[[2]], nrow = 1))
expect_identical(check1,check2)
})
devtools::test('GA')
devtools::test('GA')
devtools::test('GA')
devtools::test('GA')
# Test main function select and ga_fitness_score
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
test_that("ga_fitness_score works", {
expect_identical(fitness,fitness_scores)
})
pop_result = select(dim = 3, p = 25, t = 50, m_prob = 0.01, data = data, fitness = AIC, func = lm, response = y, min = TRUE)
names(pop_result[[3]][[1]]) = NULL
test_that("select works",{
expect_identical(unlist(pop_result[[3]][[1]]), c(TRUE, FALSE, FALSE))
})
test_that("ga_fitness_score works", {
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
expect_identical(fitness,fitness_scores)
})
test_that("ga_fitness_score works", {
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
,expect_identical(fitness,fitness_scores)
})
test_that("ga_fitness_score works", {
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
expect_identical(fitness,fitness_scores)
})
test_that("ga_crossover works",{
parentA = c(TRUE, FALSE, FALSE)
parentB = c(FALSE, TRUE, TRUE)
child1 = as.data.frame(matrix(
c(TRUE,TRUE,TRUE,
TRUE,FALSE,TRUE,
TRUE,FALSE,FALSE), byrow = T, nrow = 3))
child2 = as.data.frame(matrix(
c(FALSE,FALSE,FALSE,
FALSE,TRUE,FALSE,
FALSE,TRUE,TRUE), byrow = T, nrow = 3))
result = ga_crossover(parentA, parentB)
check1 = row.match(child1, matrix(result[[1]], nrow = 1))
check2 = row.match(child2, matrix(result[[2]], nrow = 1))
expect_identical(check1,check2)
})
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
expect_identical(fitness,fitness_scores)
test_that("ga_fitness_score works", {
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
expect_identical(fitness,fitness_scores)
})
test_that("ga_fitness_score works", {
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
expect_identical(fitness,fitness_scores)
})
test_that('ga_fitness_score works', {
y = c(1,3,5,7,9)
data2 = cbind(c(10,9,5,7,6),  c(7,6,5,4,3), c(1,2,3,4,5))
data3 = data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data2[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
fitness_score = ga_fitness_score(list_of_gene = gene, response = y, data = data3)
expect_equal(fitness, fitness_score)
})
devtools::test('GA')
y = c(1,3,5,7,9)
data2 = cbind(c(10,9,5,7,6),  c(7,6,5,4,3), c(1,2,3,4,5))
data3 = data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data2[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
fitness_score = ga_fitness_score(list_of_gene = gene, response = y, data = data3)
expect_equal(fitness, fitness_score)
devtools::test('GA')
devtools::test('GA')
devtools::test('GA')
devtools::test('GA')
devtools::test()
setwd('GA')
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
mod = lm(y~data2[,gene[[1]]])
y = c(1,3,5,7,9)
data2 = cbind(c(10,9,5,7,6),  c(7,6,5,4,3), c(1,2,3,4,5))
data3 = data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5))
gene = list(c(TRUE, TRUE, TRUE))
mod = lm(y~data2[,gene[[1]]])
fitness = AIC(mod)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
fitness = lm(mod(c(1,2,3)~c(3,2,1)))
fitness = AIC(lm(c(1,2,3)~c(3,2,1)))
fitness = AIC(lm(c(1,2,3)~c(2,2,1)))
devtools::test()
fitness = AIC(lm(c(1,2,3)~c(2,2,1)))
fitness_score = ga_fitness_score(list(c(TRUE)), response = c(1,2,3), data = data.frame(c(2,2,1))
expect_identical(fitness,fitness_scores)
})
data.frame(c(2,2,1))
ga_fitness_score(list(c(TRUE)), response = c(1,2,3), data = data.frame(c(2,2,1))
f
fitness_score =
ga_fitness_score(list(c(TRUE)), response = c(1,2,3), data = data.frame(c(2,2,1)))
fitness_score =
ga_fitness_score(list(c(TRUE)), response = c(1,2,3), data = data.frame(c(2,2,1)))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
test_that("select works",{
pop_result = select(dim = 3, p = 25, t = 50, m_prob = 0.01, data = data, fitness = AIC, func = lm, response = y, min = TRUE)
names(pop_result[[3]][[1]]) = NULL
expect_identical(unlist(pop_result[[3]][[1]]), c(TRUE, FALSE, FALSE))
})
devtools::test()
test_that("select works",{
pop_result = select(dim = 3, p = 25, t = 100, m_prob = 0.01, data = data, fitness = AIC, func = lm, response = y, min = TRUE)
names(pop_result[[3]][[1]]) = NULL
expect_identical(unlist(pop_result[[3]][[1]]), c(TRUE, FALSE, FALSE))
})
devtools::test()
library(assertthat)
library(testthat)
library(prodlim)
# Test main function select and ga_fitness_score
x = 1:100
data = cbind(x, cos(1:100), sin(1:100))
y = x + rnorm(n = 100)
gene = list()
gene[[1]] = c(TRUE, TRUE, TRUE)
gene[[2]] = c(TRUE, TRUE, FALSE)
gene[[3]] = c(TRUE, FALSE, TRUE)
gene[[4]] = c(FALSE, TRUE, TRUE)
gene[[5]] = c(FALSE, FALSE, TRUE)
gene[[6]] = c(FALSE, TRUE, FALSE)
gene[[7]] = c(TRUE, FALSE, FALSE)
fitness = numeric()
for(i in 1:7){
mod = lm(y~data[,gene[[i]]])
fitness = c(fitness, AIC(mod))
}
data = as.data.frame(data)
fitness_scores = ga_fitness_score(list_of_gene = gene, data = data, fitness = AIC, func = lm, response = y, min = FALSE)
test_that("ga_fitness_score works", {
expect_identical(fitness,fitness_scores)
})
pop_result = select(dim = 3, p = 25, t = 50, m_prob = 0.01, data = data, fitness = AIC, func = lm, response = y, min = TRUE)
names(pop_result[[3]][[1]]) = NULL
test_that("select works",{
expect_identical(unlist(pop_result[[3]][[1]]), c(TRUE, FALSE, FALSE))
})
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
