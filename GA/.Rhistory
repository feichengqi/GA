devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::create("myfirstpackage")
devtools::document()
devtools::document()
library(assertthat)
library(rlist)
library(data.table)
rlogical = function(size, p = 0.5){
# This function samples from Trues and Falses with
# probability 1/2 each by default
return(sample(c(TRUE, FALSE), size,
replace = TRUE, prob = c(p, 1-p)))
}
ga_crossover = function(parentA, parentB){
# This function take in two parents and uses a simple split
# to create children. It then picks a random child to pass on
# in the algorithm
n = length(parentA)
splitpt = sample(1:(n-1),1)
# Create two children
childA = parentA
childA[(splitpt+1):n] = parentB[(splitpt+1):n]
childB = parentB
childB[(splitpt+1):n] = parentA[(splitpt+1):n]
# Return both children
return(list(childA, childB))
}
ga_mutate = function(child, mprob = 0.03){
# This function takes in a child and randomly mutates each
# gene with probability mprob.
# Create vector of positions to mutate
changes = rlogical(length(child), mprob)
# For the subset of child that needs to be mutated, flip values
child[changes] = !child[changes]
return(child)
}
# The new fitness function.
#list_of_gene is a list of gene likes
#list(c(TRUE,FALSE,FALSE), c(TRUE,FALSE,TRUE), c(TRUE,FALSE,TRUE)).
#data is a dataframe containing several x columus.
#fitness is the fitness function, default in AIC.
#func is the regression method, likes lm or glm, default in lm.
#response is the response value (y).
#min: TRUE is for those fitness function the smaller the fitness value the better the model
#like AIC,while FALSE is for those the larger fitness value the better the model.
fitness_score <- function(list_of_gene, data, fitness = AIC, func = lm, response, min = FALSE) {
assert_that(is.data.frame(data), msg = "the data must be a dataframe.")
assert_that(length(response) == nrow(data),
msg = "the dimension of observed vectors should be the same as that of response vector.")
fitness_value <- vector()
for (i in 1:length(list_of_gene)){
gene <- list_of_gene[[i]]
regression_data <- data[,gene]
regression_data <- data.frame(y,regression_data)
model <- func(y~., data = regression_data)
fitness_value <- c(fitness_value,fitness(model))
}
if (min == TRUE){
return (-fitness_value)
}
else{
return (fitness_value)
}
}
## GA_initialize() function initializes the
GA_initialize = function(dim, p = 20){
# This function takes dimension and the number of individuals
# and returns a list of initialized individuals
individuals = data.frame(matrix(runif(n = dim*p) > 0.5, dim, p))
return(as.list(individuals))
}
# This function computes the GA results
# dim is the dimension of genes
# p is the number of individuals in population
# t is the time of iterating
GA_compute = function(dim, p, t = 100, selection_method = 'rank', partial_update = FALSE, parent_ratio = 0.5, ...){
assert_that(parent_ratio >= 0 & parent_ratio <= 1, msg = 'Ratio of parents should be between 0 and 1')
assert_that(nrow(data)>=dim, msg = 'The dimenstion exceeds the length of observed data vector.')
pop = GA_initialize(dim, p)
highest_fitness = numeric()
for(i in 1:t){
# Find fitness
fitness_scores = fitness_score(pop, ...)
highest_fitness = c(highest_fitness, max(fitness_scores))
#UPDATE(pop)
parents = pop[select_index(fitness_scores, method = selection_method)]
p = length(parents)
n_cross = floor(p/2)
children = list(n_cross*2)
for(i in 1:n_cross){
childs = ga_crossover(parentA = parents[[i]], parentB = parents[[p-i+1]])
children[[(i*2-1)]] = childs[[1]]
children[[(i*2)]] = childs[[2]]
}
if(partial_update){
ind = sample(1:p, floor(parent_ratio*p), replace = FALSE)
children[ind] = pop[ind]
}
children = lapply(children, ga_mutate)
pop = children
}
return(list(pop,highest_fitness))
}
select_index = function(fitness_scores, method = 'rank'){
assert_that(method %in% c('score', 'rank'), msg = "method should be {score, rank}")
p = length(fitness_scores)
if(method == 'rank'){
fitness_rank = frankv(fitness_scores, order = 1)
selection_prob = 2*fitness_rank / (p^2 + p)
parents = sample(1:p, size = p, replace = TRUE, prob = selection_prob)
}
if(method == 'score'){
parents = (1:p)[fitness_scores >= median(fitness_scores)]
parents = c(parents, sample(1:p, size = p - length(parents), replace = TRUE))
}
return(parents)
}
devtools::document()
devtools::document()
library(GA)
?GA
?ggplot
?ggplot2
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5),
x4 =c (5,4,6,2,4),x5 = c(100,200,300,400,500))
pop = GA_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
library(GA)
pop = GA_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
y = c(1,3,5,7,9)
data <- data.frame(x1 = c(10,9,5,7,6), x2 = c(7,6,5,4,3), x3 = c(1,2,3,4,5),
x4 =c (5,4,6,2,4),x5 = c(100,200,300,400,500))
pop = GA_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
library(GA)
pop = GA_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
library(GA)
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
library(GA)
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
library(GA)
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
library(GA)
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
?GA_compute
library(GA)
?ga_compute
devtools::document()
?GA_compute
?ga_compute
library(GA)
rm(pop)
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
library(assertthat)
library(rlist)
library(data.table)
pop = ga_compute(dim = 5, p = 20, t = 100, selection_method = 'score', partial_update = FALSE, data = data, fitness = AIC, func = glm, response = y, min = TRUE)
